{
	"title": "Join On, Group By and Having",
	"questions": [
		{
			"number": 1,
			"text": "List the customerName and the total sales amount for each customer, ordered by total sales amount in descending order.",
			"solution_query": "SELECT customerName, SUM(quantityOrdered * priceEach) AS totalSales FROM Customers JOIN Orders ON Customers.customerNumber = Orders.customerNumber JOIN OrderDetails ON Orders.orderNumber = OrderDetails.orderNumber GROUP BY customerName ORDER BY totalSales DESC"
		},
		{
			"number": 2,
			"text": "List the productName and the total quantity ordered for each product, ordered by total quantity in descending order.",
			"solution_query": "SELECT productName, SUM(quantityOrdered) AS totalQuantity FROM Products JOIN OrderDetails ON Products.productCode = OrderDetails.productCode GROUP BY productName ORDER BY totalQuantity DESC"
		},
		{
			"number": 3,
			"text": "List the country and the number of customers in each country, ordered by the number of customers in descending order.",
			"solution_query": "SELECT country, COUNT(*) AS customerCount FROM Customers GROUP BY country ORDER BY customerCount DESC"
		},
		{
			"number": 4,
			"text": "List the officeCode, city, and the total number of employees in each office.",
			"solution_query": "SELECT officeCode, city, COUNT(employeeNumber) AS totalEmployees FROM Offices JOIN Employees ON Offices.officeCode = Employees.officeCode GROUP BY officeCode, city"
		},
		{
			"number": 5,
			"text": "List the productLine and the average buy price for products in each product line, ordered by average buy price in descending order.",
			"solution_query": "SELECT productLine, AVG(buyPrice) AS avgBuyPrice FROM Products GROUP BY productLine ORDER BY avgBuyPrice DESC"
		},
		{
			"number": 6,
			"text": "List the productName and the total sales amount for each product that has generated more than $10,000 in sales.",
			"solution_query": "SELECT productName, SUM(quantityOrdered * priceEach) AS totalSales FROM Products JOIN OrderDetails ON Products.productCode = OrderDetails.productCode GROUP BY productName HAVING totalSales > 10000"
		},
		{
			"number": 7,
			"text": "List the customerName and the number of orders for each customer who has placed more than 5 orders.",
			"solution_query": "SELECT customerName, COUNT(orderNumber) AS orderCount FROM Customers JOIN Orders ON Customers.customerNumber = Orders.customerNumber GROUP BY customerName HAVING orderCount > 5"
		},
		{
			"number": 8,
			"text": "List the employeeNumber, jobTitle, and the total sales amount for each employee who has generated more than $50,000 in sales.",
			"solution_query": "SELECT employeeNumber, jobTitle, SUM(quantityOrdered * priceEach) AS totalSales FROM Employees JOIN Customers ON Employees.employeeNumber = Customers.salesRepEmployeeNumber JOIN Orders ON Customers.customerNumber = Orders.customerNumber JOIN OrderDetails ON Orders.orderNumber = OrderDetails.orderNumber GROUP BY employeeNumber, jobTitle HAVING totalSales > 50000"
		},
		{
			"number": 9,
			"text": "List the country and the total credit limit of customers in each country, ordered by total credit limit in descending order.",
			"solution_query": "SELECT country, SUM(creditLimit) AS totalCreditLimit FROM Customers GROUP BY country ORDER BY totalCreditLimit DESC"
		},
		{
			"number": 10,
			"text": "List the productLine and the maximum buy price for each product line, ordered by product line.",
			"solution_query": "SELECT productLine, MAX(buyPrice) AS maxBuyPrice FROM Products GROUP BY productLine ORDER BY productLine ASC"
		},
		{
			"number": 11,
			"text": "List the city and the total number of employees in each city that has more than 3 employees.",
			"solution_query": "SELECT city, COUNT(employeeNumber) AS employeeCount FROM Offices JOIN Employees ON Offices.officeCode = Employees.officeCode GROUP BY city HAVING employeeCount > 3"
		},
		{
			"number": 12,
			"text": "List the productLine and the total quantity ordered for each product line.",
			"solution_query": "SELECT productLine, SUM(quantityOrdered) AS totalQuantity FROM Products JOIN OrderDetails ON Products.productCode = OrderDetails.productCode GROUP BY productLine"
		},
		{
			"number": 13,
			"text": "List the employeeNumber and the number of customers managed by each employee.",
			"solution_query": "SELECT employeeNumber, COUNT(customerNumber) AS customerCount FROM Employees LEFT JOIN Customers ON Employees.employeeNumber = Customers.salesRepEmployeeNumber GROUP BY employeeNumber"
		},
		{
			"number": 14,
			"text": "List the productName and the average quantity ordered for each product.",
			"solution_query": "SELECT productName, AVG(quantityOrdered) AS avgQuantity FROM Products JOIN OrderDetails ON Products.productCode = OrderDetails.productCode GROUP BY productName"
		},
		{
			"number": 15,
			"text": "List the country and the average credit limit for customers in each country.",
			"solution_query": "SELECT country, AVG(creditLimit) AS avgCreditLimit FROM Customers GROUP BY country"
		},
		{
			"number": 16,
			"text": "List the customerName and the total sales amount for each customer whose total sales exceed $25,000.",
			"solution_query": "SELECT customerName, SUM(quantityOrdered * priceEach) AS totalSales FROM Customers JOIN Orders ON Customers.customerNumber = Orders.customerNumber JOIN OrderDetails ON Orders.orderNumber = OrderDetails.orderNumber GROUP BY customerName HAVING totalSales > 25000"
		},
		{
			"number": 17,
			"text": "List the productName and the total sales amount for each product ordered by total sales amount in descending order.",
			"solution_query": "SELECT productName, SUM(quantityOrdered * priceEach) AS totalSales FROM Products JOIN OrderDetails ON Products.productCode = OrderDetails.productCode GROUP BY productName ORDER BY totalSales DESC"
		},
		{
			"number": 18,
			"text": "List the country and the number of customers in each country that has more than 2 customers.",
			"solution_query": "SELECT country, COUNT(*) AS customerCount FROM Customers GROUP BY country HAVING customerCount > 2"
		},
		{
			"number": 19,
			"text": "List the employeeNumber and the total sales amount generated by each employee, ordered by total sales in descending order.",
			"solution_query": "SELECT employeeNumber, SUM(quantityOrdered * priceEach) AS totalSales FROM Employees JOIN Customers ON Employees.employeeNumber = Customers.salesRepEmployeeNumber JOIN Orders ON Customers.customerNumber = Orders.customerNumber JOIN OrderDetails ON Orders.orderNumber = OrderDetails.orderNumber GROUP BY employeeNumber ORDER BY totalSales DESC"
		},
		{
			"number": 20,
			"text": "List the productLine and the number of products in each product line.",
			"solution_query": "SELECT productLine, COUNT(*) AS productCount FROM Products GROUP BY productLine"
		},
		{
			"number": 21,
			"text": "List the city and the total number of orders placed by customers in each city.",
			"solution_query": "SELECT city, COUNT(orderNumber) AS orderCount FROM Customers JOIN Orders ON Customers.customerNumber = Orders.customerNumber GROUP BY city"
		},
		{
			"number": 22,
			"text": "List the productName and the total quantity ordered for each product that has been ordered more than 1,000 times.",
			"solution_query": "SELECT productName, SUM(quantityOrdered) AS totalQuantity FROM Products JOIN OrderDetails ON Products.productCode = OrderDetails.productCode GROUP BY productName HAVING totalQuantity > 1000"
		},
		{
			"number": 23,
			"text": "List the productLine and the total sales amount for each product line.",
			"solution_query": "SELECT productLine, SUM(quantityOrdered * priceEach) AS totalSales FROM Products JOIN OrderDetails ON Products.productCode = OrderDetails.productCode GROUP BY productLine"
		},
		{
			"number": 24,
			"text": "List the employeeNumber and the number of orders handled by each employee.",
			"solution_query": "SELECT employeeNumber, COUNT(orderNumber) AS orderCount FROM Employees JOIN Customers ON Employees.employeeNumber = Customers.salesRepEmployeeNumber JOIN Orders ON Customers.customerNumber = Orders.customerNumber GROUP BY employeeNumber"
		},
		{
			"number": 25,
			"text": "List the productName and the total sales amount for each product that has generated sales above $5,000.",
			"solution_query": "SELECT productName, SUM(quantityOrdered * priceEach) AS totalSales FROM Products JOIN OrderDetails ON Products.productCode = OrderDetails.productCode GROUP BY productName HAVING totalSales > 5000"
		}
	]
}
